<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="animalNameIsTooShortError" xml:space="preserve">
    <value>Name is too short!</value>
  </data>
  <data name="animalNameIsTooLongError" xml:space="preserve">
    <value>Name is too long!</value>
  </data>
  <data name="ageIsNegativeError" xml:space="preserve">
    <value>Age cannot be negative!</value>
  </data>
  <data name="ageMustBeLessThenError" xml:space="preserve">
    <value>Age must be less then </value>
  </data>
  <data name="enterDigitsError" xml:space="preserve">
    <value>Please enter only digits</value>
  </data>
  <data name="incorrectValuesError" xml:space="preserve">
    <value>Please enter correct values</value>
  </data>
  <data name="emptyFieldsError" xml:space="preserve">
    <value>Fields cannot be empty</value>
  </data>
  <data name="enterLettersError" xml:space="preserve">
    <value>Please enter only letters</value>
  </data>
  <data name="describeDefault" xml:space="preserve">
    <value>This is {0}, he or she is {1} years old.</value>
  </data>
  <data name="ateWithConsequence" xml:space="preserve">
    <value>ate {0} and now {1}.</value>
  </data>
  <data name="ate" xml:space="preserve">
    <value>ate {0}.</value>
  </data>
  <data name="consequenceDissatisfied" xml:space="preserve">
    <value>is dissatisfied</value>
  </data>
  <data name="consequenceFeelsBad" xml:space="preserve">
    <value>feels bad</value>
  </data>
  <data name="consequenceWantsMore" xml:space="preserve">
    <value>wants more</value>
  </data>
  <data name="crocodilePreferableFood" xml:space="preserve">
    <value>Fish</value>
  </data>
  <data name="crocodileSound" xml:space="preserve">
    <value>...</value>
  </data>
  <data name="crocodileDefaultCrazyAction" xml:space="preserve">
    <value>hided into water.</value>
  </data>
  <data name="crocodileInterestedAction" xml:space="preserve">
    <value>is interested in new neighbour {0}.</value>
  </data>
  <data name="crocodileIndifferentAction" xml:space="preserve">
    <value>is indifferent to {0}.</value>
  </data>
  <data name="lionPreferableFood" xml:space="preserve">
    <value>Meat</value>
  </data>
  <data name="lionSound" xml:space="preserve">
    <value>Arrr!</value>
  </data>
  <data name="lionCrazyAction" xml:space="preserve">
    <value>haven't been fed for {0} seconds, now is feeling fresh and playing with a ball as a kitten.</value>
  </data>
  <data name="monkeyTriggerFood" xml:space="preserve">
    <value>Banana</value>
  </data>
  <data name="monkeyPreferableFood" xml:space="preserve">
    <value>Fruit</value>
  </data>
  <data name="monkeySound" xml:space="preserve">
    <value>Uga! Uga!</value>
  </data>
  <data name="monkeyDefaultCrazyAction" xml:space="preserve">
    <value>runs around the enclosure like crazy.</value>
  </data>
  <data name="monkeyFoodCrazyAction" xml:space="preserve">
    <value>throws {0} back.</value>
  </data>
  <data name="owlWisdom1" xml:space="preserve">
    <value>Owls rotate heads nearly 270°.</value>
  </data>
  <data name="owlWisdom2" xml:space="preserve">
    <value>Because of special feathers structure to fly silently, owl easily go wet.</value>
  </data>
  <data name="owlWisdom3" xml:space="preserve">
    <value>Best pet? Definitely a snake!</value>
  </data>
  <data name="owlWisdom4" xml:space="preserve">
    <value>Asymmetrical ears help owls catch crazy zoo gossip.</value>
  </data>
  <data name="owlWisdom5" xml:space="preserve">
    <value>Owls don’t build nests - they just move in.</value>
  </data>
  <data name="owlPreferableFood" xml:space="preserve">
    <value>Mouse</value>
  </data>
  <data name="owlSound" xml:space="preserve">
    <value>Hoo hoo.</value>
  </data>
  <data name="owlCrazyAction" xml:space="preserve">
    <value>is now {0} and shares this wisdom with you - {1}</value>
  </data>
  <data name="zebraPreferableFood" xml:space="preserve">
    <value>Grass</value>
  </data>
  <data name="zebraSound" xml:space="preserve">
    <value>Hufff.</value>
  </data>
  <data name="zebraIsFull" xml:space="preserve">
    <value>doesn't want more food; {0} {1}</value>
  </data>
  <data name="zebraCrazyAction" xml:space="preserve">
    <value>is now full of energy, runs around and bucks.</value>
  </data>
  <data name="addAnimalWindowTitle" xml:space="preserve">
    <value>Add animal</value>
  </data>
  <data name="animalTypeNotSupportedError" xml:space="preserve">
    <value>Animal type not supported.</value>
  </data>
  <data name="isLetterRegex" xml:space="preserve">
    <value>^[a-zA-Z\s]+$</value>
  </data>
  <data name="owlCrazyActionTrigger" xml:space="preserve">
    <value>hoo</value>
  </data>
  <data name="lionName" xml:space="preserve">
    <value>Simba</value>
  </data>
  <data name="lionDescription" xml:space="preserve">
    <value>Likes to eat and sleep.</value>
  </data>
  <data name="zebraName" xml:space="preserve">
    <value>Marty</value>
  </data>
  <data name="zebraDescription" xml:space="preserve">
    <value>Was born in savanna and moved to the zoo at 1 year old. Sometimes bites.</value>
  </data>
  <data name="crocodileName" xml:space="preserve">
    <value>Sandy</value>
  </data>
  <data name="crocodileDescription" xml:space="preserve">
    <value>Just crocodile. Don't put your hands to her.</value>
  </data>
  <data name="monkeyName" xml:space="preserve">
    <value>George</value>
  </data>
  <data name="monkeyDescription" xml:space="preserve">
    <value>Throws bananas to public.</value>
  </data>
  <data name="owlName" xml:space="preserve">
    <value>Hedwig</value>
  </data>
  <data name="owlDescription" xml:space="preserve">
    <value>Old and wise owl.</value>
  </data>
  <data name="foodEmptyStringError" xml:space="preserve">
    <value>Food cannot be empty string</value>
  </data>
  <data name="hedgehogPreferableFood" xml:space="preserve">
    <value>snake</value>
  </data>
  <data name="hedgehogSound" xml:space="preserve">
    <value>squeaky-squeak</value>
  </data>
  <data name="hedgehogCrazyAction" xml:space="preserve">
    <value>At night {0} becomes fast as Sonic and runs all over the place.</value>
  </data>
  <data name="kiwiCrazyAction" xml:space="preserve">
    <value>Kivi transforms into the kivi fruit.</value>
  </data>
  <data name="kiwiSound" xml:space="preserve">
    <value>kee-wee, kee-wee, kee-wee</value>
  </data>
  <data name="kiwiPreferableFood" xml:space="preserve">
    <value>kiwi</value>
  </data>
  <data name="horsePreferableFood" xml:space="preserve">
    <value>carrots</value>
  </data>
  <data name="horseSound" xml:space="preserve">
    <value>eeehh-heee-heeeh</value>
  </data>
  <data name="horseCrazyAction" xml:space="preserve">
    <value>The horse rears and thrashes wildly.</value>
  </data>
  <data name="horseCrazyFoodPattern" xml:space="preserve">
    <value>\b(apple|sugar|oat)\b</value>
  </data>
</root>